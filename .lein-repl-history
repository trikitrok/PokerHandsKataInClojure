(clojure.string/split "2H 3D 5S 9C KD" #" ")
(map #(:face {(first %) :value (second %)} *1)
)
(clojure.string/split "2H 3D 5S 9C KD" #" ")
*!
(clojure.string/split "2H 3D 5S 9C KD" #" ")
*1
(map #(:face {(first %) :value (second %)}) *1)
(map #( {:face (first %) :value (second %)}) *1)
(clojure.string/split "2H 3D 5S 9C KD" #" ")
(map #(:face {(first %) :value (second %)}) *1)
(clojure.string/split "2H 3D 5S 9C KD" #" ")
(map #( {:face (first %) :value (second %)}) *1)
(clojure.string/split "2H 3D 5S 9C KD" #" ")
(first *1)
(clojure.string/split "2H 3D 5S 9C KD" #" ")
(second *1)
(second "3D")
(first "3D")
(map #({:face (str (first %)) :suit (str (second %))})(clojure.string/split "2H 3D 5S 9C KD" #" "))
(map #(hashmap :face (str (first %)) :suit (str (second %)))) (clojure.string/split "2H 3D 5S 9C KD" #" "))
(map #(hashmap :face (str (first %)) :suit (str (seco (clojure.string/split "2H 3D 5S 9C KD" #" "))
(map #(hashmap :face (str (first %)) :suit (str (second %)))) (clojure.string/split "2H 3D 5S 9C KD" #" ")))
(map #(hashmap :face (str (first %)) :suit (str (sec) (clojure.string/split "2H 3D 5S 9C KD" #" "))
(map #(hashmap :face (str (first %)) :suit (str (second %))) (clojure.string/split "2H 3D 5S 9C KD" #" "))
(map #(hash-map :face (str (first %)) :suit (str (second %))) (clojure.string/split "2H 3D 5S 9C KD" #" "))
(key (apply max-key val {:a 3 :b 7 :c 9}))
(apply max-key val {:a 3 :b 7 :c 9})
(val (apply max-key val {:a 3 :b 7 :c 9}))
(compare "a" "b")
(.equals "a" "b")
(.equals "a" "a")
(.equals "a" "a" "c")
